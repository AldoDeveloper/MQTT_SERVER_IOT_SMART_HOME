{"version":3,"sources":["../src/server/tcp/index.ts","../src/utility/utility.getip.ts","../src/server/mqtt/index.ts","../src/server/mqtt/mqtt.aedes.ts","../src/server/mqtt/mqtt.option.ts","../src/index.ts"],"sourcesContent":["import * as net from 'net'\r\nimport logger from '../../logger';\r\nimport getLocalIp from '../../utility/utility.getip';\r\n\r\nexport default async function TcpServer(port: number, host: string) {\r\n    \r\n    const tcp = new net.Server({}, async (socket) => {\r\n        socket.on(\"data\", async (chunk) => {\r\n            \r\n        })\r\n    });\r\n\r\n    process.on(\"SIGINT\", () => {\r\n        tcp.close();\r\n    });\r\n\r\n    tcp.listen(port || 5500, host || \"0.0.0.0\", () => {\r\n         logger.info(`TCP Server Success Run , Host: ${getLocalIp()}, Port: ${port}`)\r\n    });\r\n}\r\n","import { networkInterfaces } from 'os'\r\n\r\nexport default function getLocalIp() {\r\n\r\n    const interfaces = networkInterfaces();\r\n    \r\n    for(const interfaceName in interfaces) {\r\n        const networkInterface  = interfaces[interfaceName];\r\n        for(const iface of networkInterface){\r\n             if(iface.family === 'IPv4' && iface.internal === false) {\r\n                return iface.address\r\n             }\r\n        }\r\n    }\r\n    return null\r\n}","import { createServer } from 'net';\r\nimport ServerMqttAedes from './mqtt.aedes';\r\nimport logger from '../../logger';\r\nimport getLocalIp from '../../utility/utility.getip';\r\n\r\nasync function MQTTServer(port: number, host: string) {\r\n    \r\n    const mqttServer = createServer(ServerMqttAedes.handle);\r\n    mqttServer.listen(port, host, () => {\r\n        logger.info(`Mqtt Server Success Run , Host: ${getLocalIp()}, Port: ${port}`);\r\n    })\r\n}\r\n\r\nexport default MQTTServer","import Aedes from \"aedes\"\r\nimport { aedesOptions } from \"./mqtt.option\";\r\n\r\nconst ServerMqttAedes = new Aedes({...aedesOptions});\r\n\r\nServerMqttAedes.on(\"subscribe\", (sub, client) => {\r\n    \r\n});\r\n\r\nServerMqttAedes.on(\"unsubscribe\", (unsubsribe, client) => {\r\n    console.group(`id:${client.id}`);\r\n    console.table(unsubsribe)\r\n    console.groupEnd();\r\n});\r\n\r\nServerMqttAedes.on(\"publish\", (packet, client) => {\r\n    packet.payload = Buffer.from(JSON.stringify({ name: \"Aldo Ratmawan\" }))\r\n});\r\n\r\nServerMqttAedes.on(\"clientDisconnect\", (client) => {\r\n    console.log(`client id:${client.id} disconnected`)\r\n});\r\n\r\nServerMqttAedes.on(\"clientError\", (client, err) => {\r\n    console.log(`client id:${client.id} error:${err.message}`)\r\n})\r\n\r\nServerMqttAedes.on(\"clientReady\", (client) => {\r\n    console.log(`client id:${client.id} clientReady`)\r\n});\r\n\r\nServerMqttAedes.on(\"connectionError\", (client) => {\r\n    client.close();\r\n    console.log(`client error: ${client.id}`)\r\n});\r\n\r\nexport default ServerMqttAedes;\r\n","import { AedesOptions } from \"aedes\";\r\n\r\nexport const aedesOptions : AedesOptions = {\r\n    authenticate: async function (client, username, password, callback) {\r\n        callback(null, true);\r\n    },\r\n\r\n    authorizePublish: async function (client, packet, callback) {\r\n        callback(null);\r\n    },\r\n\r\n    authorizeSubscribe: async function (client, subscription, callback) {\r\n        callback(null, subscription)\r\n    }\r\n};","import TcpServer from './server/tcp';\r\nimport MQTTServer from './server/mqtt';\r\nimport EnvConfig from './config/config';\r\n\r\nconst PORT_MQTT = 8500;\r\nconst HOST_MQTT = \"0.0.0.0\";\r\n\r\nconst PORT_TCP = 8501;\r\nconst HOST_TCP = \"0.0.0.0\";\r\n\r\nEnvConfig();\r\n\r\nasync function bootraps() {\r\n    \r\n    Promise.allSettled([\r\n        MQTTServer(PORT_MQTT, HOST_MQTT),\r\n        TcpServer(PORT_TCP, HOST_TCP),\r\n    ])\r\n}\r\n\r\nbootraps();"],"mappings":"yDAAA,UAAYA,MAAS,MCArB,OAAS,qBAAAC,MAAyB,KAEnB,SAARC,GAA8B,CAEjC,IAAMC,EAAaF,EAAkB,EAErC,QAAUG,KAAiBD,EAAY,CACnC,IAAME,EAAoBF,EAAWC,CAAa,EAClD,QAAUE,KAASD,EACd,GAAGC,EAAM,SAAW,QAAUA,EAAM,WAAa,GAC9C,OAAOA,EAAM,OAGzB,CACA,OAAO,IACX,CDXA,SAAOC,EAAiCC,EAAcC,EAAc,QAAAC,EAAA,sBAEhE,IAAMC,EAAM,IAAQ,SAAO,CAAC,EAAUC,GAAWF,EAAA,sBAC7CE,EAAO,GAAG,OAAeC,GAAUH,EAAA,sBAEnC,EAAC,CACL,EAAC,EAED,QAAQ,GAAG,SAAU,IAAM,CACvBC,EAAI,MAAM,CACd,CAAC,EAEDA,EAAI,OAAOH,GAAQ,KAAMC,GAAQ,UAAW,IAAM,CAC7CK,EAAO,KAAK,kCAAkCC,EAAW,CAAC,WAAWP,CAAI,EAAE,CAChF,CAAC,CACL,GEnBA,OAAS,gBAAAQ,MAAoB,MCA7B,OAAOC,MAAW,QCEX,IAAMC,EAA8B,CACvC,aAAc,SAAgBC,EAAQC,EAAUC,EAAUC,EAAU,QAAAC,EAAA,sBAChED,EAAS,KAAM,EAAI,CACvB,IAEA,iBAAkB,SAAgBH,EAAQK,EAAQF,EAAU,QAAAC,EAAA,sBACxDD,EAAS,IAAI,CACjB,IAEA,mBAAoB,SAAgBH,EAAQM,EAAcH,EAAU,QAAAC,EAAA,sBAChED,EAAS,KAAMG,CAAY,CAC/B,GACJ,EDXA,IAAMC,EAAkB,IAAIC,EAAMC,EAAA,GAAIC,EAAa,EAEnDH,EAAgB,GAAG,YAAa,CAACI,EAAKC,IAAW,CAEjD,CAAC,EAEDL,EAAgB,GAAG,cAAe,CAACM,EAAYD,IAAW,CACtD,QAAQ,MAAM,MAAMA,EAAO,EAAE,EAAE,EAC/B,QAAQ,MAAMC,CAAU,EACxB,QAAQ,SAAS,CACrB,CAAC,EAEDN,EAAgB,GAAG,UAAW,CAACO,EAAQF,IAAW,CAC9CE,EAAO,QAAU,OAAO,KAAK,KAAK,UAAU,CAAE,KAAM,eAAgB,CAAC,CAAC,CAC1E,CAAC,EAEDP,EAAgB,GAAG,mBAAqBK,GAAW,CAC/C,QAAQ,IAAI,aAAaA,EAAO,EAAE,eAAe,CACrD,CAAC,EAEDL,EAAgB,GAAG,cAAe,CAACK,EAAQG,IAAQ,CAC/C,QAAQ,IAAI,aAAaH,EAAO,EAAE,UAAUG,EAAI,OAAO,EAAE,CAC7D,CAAC,EAEDR,EAAgB,GAAG,cAAgBK,GAAW,CAC1C,QAAQ,IAAI,aAAaA,EAAO,EAAE,cAAc,CACpD,CAAC,EAEDL,EAAgB,GAAG,kBAAoBK,GAAW,CAC9CA,EAAO,MAAM,EACb,QAAQ,IAAI,iBAAiBA,EAAO,EAAE,EAAE,CAC5C,CAAC,EAED,IAAOI,EAAQT,ED/Bf,SAAeU,EAAWC,EAAcC,EAAc,QAAAC,EAAA,sBAE/BC,EAAaC,EAAgB,MAAM,EAC3C,OAAOJ,EAAMC,EAAM,IAAM,CAChCI,EAAO,KAAK,mCAAmCC,EAAW,CAAC,WAAWN,CAAI,EAAE,CAChF,CAAC,CACL,GAEA,IAAOO,EAAQR,EGTf,IAAMS,EAAY,KACZC,EAAY,UAEZC,EAAW,KACXC,EAAW,UAEjBC,EAAU,EAEV,SAAeC,GAAW,QAAAC,EAAA,sBAEtB,QAAQ,WAAW,CACfC,EAAWP,EAAWC,CAAS,EAC/BO,EAAUN,EAAUC,CAAQ,CAChC,CAAC,CACL,GAEAE,EAAS","names":["net","networkInterfaces","getLocalIp","interfaces","interfaceName","networkInterface","iface","TcpServer","port","host","__async","tcp","socket","chunk","logger_default","getLocalIp","createServer","Aedes","aedesOptions","client","username","password","callback","__async","packet","subscription","ServerMqttAedes","Aedes","__spreadValues","aedesOptions","sub","client","unsubsribe","packet","err","mqtt_aedes_default","MQTTServer","port","host","__async","createServer","mqtt_aedes_default","logger_default","getLocalIp","mqtt_default","PORT_MQTT","HOST_MQTT","PORT_TCP","HOST_TCP","config_default","bootraps","__async","mqtt_default","TcpServer"]}