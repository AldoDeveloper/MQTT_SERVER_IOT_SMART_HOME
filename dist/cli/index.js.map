{"version":3,"sources":["../../src/cli/index.ts","../../src/logger/error.logger.ts","../../src/logger/info.logger.ts","../../src/logger/index.ts","../../src/config/config.ts"],"sourcesContent":["import inquirer from 'inquirer';\r\nimport mqtt     from 'mqtt';\r\nimport logger from '../logger';\r\nimport EnvConfig from '../config/config';\r\n\r\nconst username_verify = \"aldo1909\";\r\nconst password_verify = \"aldo12345\";\r\n\r\nEnvConfig();\r\n\r\nconsole.log(process.env.MQTT_PORT);\r\n\r\nexport async function CLI() {\r\n    \r\n    inquirer.prompt([\r\n        {\r\n            type: \"input\",\r\n            name: \"username\",\r\n            message: \"Username [CLI]:\",\r\n        },\r\n        {\r\n            type: \"password\",\r\n            name: \"password\",\r\n            message: \"Password [CLI]:\",\r\n        }\r\n\r\n    ]).then((answer) => {\r\n\r\n        const username = answer.username;\r\n        const password = answer.password;\r\n\r\n        if(username_verify !== username || password_verify !== password) {\r\n            logger.err(\"Invalid username or password\");\r\n            process.exit(0);\r\n        };\r\n        console.log(\"\\n\");\r\n\r\n        inquirer.prompt([\r\n            {\r\n                type: \"list\",\r\n                name : \"option\",\r\n                message: '🛠️ Select an option:',\r\n                choices :[\r\n                    {\r\n                        name: '📊 Connect to MQTT',\r\n                        value: \"MQTT\"\r\n                    },\r\n                    {\r\n                        name: \"📊 Connect to TCP\",\r\n                        value: \"TCP\"\r\n                    },\r\n                    {\r\n                        name: \"📊 Connect to HTTP\",\r\n                        value: \"HTTP\"\r\n                    }\r\n                ]\r\n            }\r\n        ]).then((answer) => {\r\n            const option = answer.option;\r\n            logger.info(option)\r\n        })\r\n\r\n        // const ip     = answer['IP INPUT'];\r\n        // const port   = answer['IP PORT'];\r\n\r\n        // const client = mqtt.connect(`mqtt://${ip}:${port}`);\r\n\r\n        // client.on(\"connect\", (data) => {\r\n        //      logger.info(\"ip server is connected!\")\r\n        // });\r\n\r\n        // client.on(\"disconnect\", (packet) => {\r\n        //     console.log(`client id ${packet.messageId} disconnected`);\r\n        // });\r\n\r\n        // client.on(\"error\", (err) => {\r\n\r\n        // });\r\n\r\n        // client.on(\"message\", (topic, payload) => {\r\n        //     const object = {\r\n        //         topic, \r\n        //         payload: JSON.parse(payload.toString())\r\n        //     };\r\n\r\n        //     logger.info(\"LOGGER MQTT SERVER\")\r\n        // });\r\n\r\n        // client.subscribe(['app', \"lamp\"]);\r\n\r\n    })\r\n}\r\nCLI();","import winston from \"winston\";\r\nimport kleur from \"kleur\";\r\n\r\nconst logError = new winston.Logger({\r\n    level: \"error\",\r\n    exitOnError: false,\r\n    transports: [\r\n        new winston.transports.Console({\r\n            handleExceptions: true,\r\n            format: winston.format.printf(({ level, message }) => {\r\n                return `${kleur.red(`[SMART_HOME] -> [${level.toUpperCase()}]`)} ${kleur.red(message as string)}`;\r\n            })\r\n        })\r\n    ]\r\n});\r\n\r\nexport default logError;","import winston from \"winston\";\r\nimport kleur from \"kleur\";\r\n\r\nconst logInfo = new winston.Logger({\r\n    level: \"info\",\r\n    exitOnError: false,\r\n    transports: [\r\n        new winston.transports.Console({\r\n            handleExceptions: true,\r\n            format: winston.format.printf(({level, message}) => {\r\n                return `${kleur.blue(`[SMART_HOME] - ${new Date(Date.now()).toString()} -> [${level.toUpperCase()}]`)} ${kleur.blue(message as string)}`;\r\n            })\r\n        })\r\n    ]\r\n});\r\n\r\nexport default logInfo;","import logError from \"./error.logger\";\r\nimport logInfo from \"./info.logger\";\r\n\r\nconst logger = {\r\n    info : function(message: string) {\r\n        return logInfo.log(\"info\", message)\r\n    },\r\n    err : function(message: string) {\r\n        return logError.log(\"error\", message)\r\n    }\r\n}\r\n\r\nexport default logger;","\r\nimport { config } from 'dotenv';\r\nimport { join, resolve } from 'path'\r\n\r\nconst NODE_ENV = process.env.NODE_ENV || \"dev.env\";\r\n\r\nconst EnvConfig = () => {\r\n    config({ path: resolve(process.cwd(), NODE_ENV) })\r\n};\r\n\r\nexport default EnvConfig;"],"mappings":"0vBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,SAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAqB,uBCArB,IAAAC,EAAoB,sBACpBC,EAAkB,oBAEZC,EAAW,IAAI,EAAAC,QAAQ,OAAO,CAChC,MAAO,QACP,YAAa,GACb,WAAY,CACR,IAAI,EAAAA,QAAQ,WAAW,QAAQ,CAC3B,iBAAkB,GAClB,OAAQ,EAAAA,QAAQ,OAAO,OAAO,CAAC,CAAE,MAAAC,EAAO,QAAAC,CAAQ,IACrC,GAAG,EAAAC,QAAM,IAAI,oBAAoBF,EAAM,YAAY,CAAC,GAAG,CAAC,IAAI,EAAAE,QAAM,IAAID,CAAiB,CAAC,EAClG,CACL,CAAC,CACL,CACJ,CAAC,EAEME,EAAQL,EChBf,IAAAM,EAAoB,sBACpBC,EAAkB,oBAEZC,EAAU,IAAI,EAAAC,QAAQ,OAAO,CAC/B,MAAO,OACP,YAAa,GACb,WAAY,CACR,IAAI,EAAAA,QAAQ,WAAW,QAAQ,CAC3B,iBAAkB,GAClB,OAAQ,EAAAA,QAAQ,OAAO,OAAO,CAAC,CAAC,MAAAC,EAAO,QAAAC,CAAO,IACnC,GAAG,EAAAC,QAAM,KAAK,kBAAkB,IAAI,KAAK,KAAK,IAAI,CAAC,EAAE,SAAS,CAAC,QAAQF,EAAM,YAAY,CAAC,GAAG,CAAC,IAAI,EAAAE,QAAM,KAAKD,CAAiB,CAAC,EACzI,CACL,CAAC,CACL,CACJ,CAAC,EAEME,EAAQL,ECbf,IAAMM,EAAS,CACX,KAAO,SAASC,EAAiB,CAC7B,OAAOC,EAAQ,IAAI,OAAQD,CAAO,CACtC,EACA,IAAM,SAASA,EAAiB,CAC5B,OAAOE,EAAS,IAAI,QAASF,CAAO,CACxC,CACJ,EAEOG,EAAQJ,ECXf,IAAAK,EAAuB,kBACvBC,EAA8B,gBAExBC,EAAW,QAAQ,IAAI,UAAY,UAEnCC,EAAY,IAAM,IACpB,UAAO,CAAE,QAAM,WAAQ,QAAQ,IAAI,EAAGD,CAAQ,CAAE,CAAC,CACrD,EAEOE,EAAQD,EJLf,IAAME,EAAkB,WAClBC,EAAkB,YAExBC,EAAU,EAEV,QAAQ,IAAI,QAAQ,IAAI,SAAS,EAEjC,SAAsBC,GAAM,QAAAC,EAAA,sBAExB,EAAAC,QAAS,OAAO,CACZ,CACI,KAAM,QACN,KAAM,WACN,QAAS,iBACb,EACA,CACI,KAAM,WACN,KAAM,WACN,QAAS,iBACb,CAEJ,CAAC,EAAE,KAAMC,GAAW,CAEhB,IAAMC,EAAWD,EAAO,SAClBE,EAAWF,EAAO,UAErBN,IAAoBO,GAAYN,IAAoBO,KACnDC,EAAO,IAAI,8BAA8B,EACzC,QAAQ,KAAK,CAAC,GAElB,QAAQ,IAAI;AAAA,CAAI,EAEhB,EAAAJ,QAAS,OAAO,CACZ,CACI,KAAM,OACN,KAAO,SACP,QAAS,oCACT,QAAS,CACL,CACI,KAAM,4BACN,MAAO,MACX,EACA,CACI,KAAM,2BACN,MAAO,KACX,EACA,CACI,KAAM,4BACN,MAAO,MACX,CACJ,CACJ,CACJ,CAAC,EAAE,KAAMC,GAAW,CAChB,IAAMI,EAASJ,EAAO,OACtBG,EAAO,KAAKC,CAAM,CACtB,CAAC,CA8BL,CAAC,CACL,GACAP,EAAI","names":["cli_exports","__export","CLI","__toCommonJS","import_inquirer","import_winston","import_kleur","logError","winston","level","message","kleur","error_logger_default","import_winston","import_kleur","logInfo","winston","level","message","kleur","info_logger_default","logger","message","info_logger_default","error_logger_default","logger_default","import_dotenv","import_path","NODE_ENV","EnvConfig","config_default","username_verify","password_verify","config_default","CLI","__async","inquirer","answer","username","password","logger_default","option"]}