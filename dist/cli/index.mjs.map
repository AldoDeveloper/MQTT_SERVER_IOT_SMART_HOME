{"version":3,"sources":["../../src/cli/index.ts"],"sourcesContent":["import inquirer from 'inquirer';\r\nimport mqtt     from 'mqtt';\r\nimport logger from '../logger';\r\nimport EnvConfig from '../config/config';\r\n\r\nconst username_verify = \"aldo1909\";\r\nconst password_verify = \"aldo12345\";\r\n\r\nEnvConfig();\r\n\r\nconsole.log(process.env.MQTT_PORT);\r\n\r\nexport async function CLI() {\r\n    \r\n    inquirer.prompt([\r\n        {\r\n            type: \"input\",\r\n            name: \"username\",\r\n            message: \"Username [CLI]:\",\r\n        },\r\n        {\r\n            type: \"password\",\r\n            name: \"password\",\r\n            message: \"Password [CLI]:\",\r\n        }\r\n\r\n    ]).then((answer) => {\r\n\r\n        const username = answer.username;\r\n        const password = answer.password;\r\n\r\n        if(username_verify !== username || password_verify !== password) {\r\n            logger.err(\"Invalid username or password\");\r\n            process.exit(0);\r\n        };\r\n        console.log(\"\\n\");\r\n\r\n        inquirer.prompt([\r\n            {\r\n                type: \"list\",\r\n                name : \"option\",\r\n                message: '🛠️ Select an option:',\r\n                choices :[\r\n                    {\r\n                        name: '📊 Connect to MQTT',\r\n                        value: \"MQTT\"\r\n                    },\r\n                    {\r\n                        name: \"📊 Connect to TCP\",\r\n                        value: \"TCP\"\r\n                    },\r\n                    {\r\n                        name: \"📊 Connect to HTTP\",\r\n                        value: \"HTTP\"\r\n                    }\r\n                ]\r\n            }\r\n        ]).then((answer) => {\r\n            const option = answer.option;\r\n            logger.info(option)\r\n        })\r\n\r\n        // const ip     = answer['IP INPUT'];\r\n        // const port   = answer['IP PORT'];\r\n\r\n        // const client = mqtt.connect(`mqtt://${ip}:${port}`);\r\n\r\n        // client.on(\"connect\", (data) => {\r\n        //      logger.info(\"ip server is connected!\")\r\n        // });\r\n\r\n        // client.on(\"disconnect\", (packet) => {\r\n        //     console.log(`client id ${packet.messageId} disconnected`);\r\n        // });\r\n\r\n        // client.on(\"error\", (err) => {\r\n\r\n        // });\r\n\r\n        // client.on(\"message\", (topic, payload) => {\r\n        //     const object = {\r\n        //         topic, \r\n        //         payload: JSON.parse(payload.toString())\r\n        //     };\r\n\r\n        //     logger.info(\"LOGGER MQTT SERVER\")\r\n        // });\r\n\r\n        // client.subscribe(['app', \"lamp\"]);\r\n\r\n    })\r\n}\r\nCLI();"],"mappings":"wDAAA,OAAOA,MAAc,WAKrB,IAAMC,EAAkB,WAClBC,EAAkB,YAExBC,EAAU,EAEV,QAAQ,IAAI,QAAQ,IAAI,SAAS,EAEjC,SAAsBC,GAAM,QAAAC,EAAA,sBAExBC,EAAS,OAAO,CACZ,CACI,KAAM,QACN,KAAM,WACN,QAAS,iBACb,EACA,CACI,KAAM,WACN,KAAM,WACN,QAAS,iBACb,CAEJ,CAAC,EAAE,KAAMC,GAAW,CAEhB,IAAMC,EAAWD,EAAO,SAClBE,EAAWF,EAAO,UAErBN,IAAoBO,GAAYN,IAAoBO,KACnDC,EAAO,IAAI,8BAA8B,EACzC,QAAQ,KAAK,CAAC,GAElB,QAAQ,IAAI;AAAA,CAAI,EAEhBJ,EAAS,OAAO,CACZ,CACI,KAAM,OACN,KAAO,SACP,QAAS,oCACT,QAAS,CACL,CACI,KAAM,4BACN,MAAO,MACX,EACA,CACI,KAAM,2BACN,MAAO,KACX,EACA,CACI,KAAM,4BACN,MAAO,MACX,CACJ,CACJ,CACJ,CAAC,EAAE,KAAMC,GAAW,CAChB,IAAMI,EAASJ,EAAO,OACtBG,EAAO,KAAKC,CAAM,CACtB,CAAC,CA8BL,CAAC,CACL,GACAP,EAAI","names":["inquirer","username_verify","password_verify","config_default","CLI","__async","inquirer","answer","username","password","logger_default","option"]}